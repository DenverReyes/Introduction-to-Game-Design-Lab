import pygame
import time
import random

class Projectile:
    def __init__(self, x, y, facing):
        self.x = x
        self.y = y
        self.facing = facing
        self.speed = 8

    def move(self):
        if self.facing == "left":
            self.x -= self.speed
        elif self.facing == "right":
            self.x += self.speed

    def draw(self, win):
        pygame.draw.circle(win, (255, 0, 0), (self.x, self.y), 5)  # Red circle for the projectile

class Enemy:
    def __init__(self, player_x, player_y):
        self.x = 500
        self.y = player_y
        self.speed = 3
        self.player_x = player_x
        self.player_y = player_y
        self.image = pygame.image.load('snake.png')
        self.dead_image = pygame.image.load('snake_dead.png')  # Load the dead snake image
        self.hitbox = (self.x, self.y, 64, 64)
        self.width = 64
        self.height = 64
        self.killed = False  # Add a killed attribute to track whether the enemy has been killed

    def move(self):
        if not self.killed:
            if self.x > self.player_x:
                self.x -= self.speed
            elif self.x < self.player_x:
                self.x += self.speed

            self.hitbox = (self.x, self.y, 64, 64)

    def draw(self, win):
        if not self.killed:
            win.blit(self.image, (self.x, self.y))
        else:
            win.blit(self.dead_image, (self.x, self.y))
            if time.time() - self.kill_time >= 2:
                self.remove = True  # Set a flag to remove the dead enemy after 2 seconds
    

class Player:
    def __init__(self):
        self.x = 50
        self.y = 400
        self.width = 64
        self.height = 64
        self.speed = 5
        self.walkRight = [pygame.image.load('R1.png'), pygame.image.load('R2.png')]
        self.walkLeft = [pygame.image.load('L1.png'), pygame.image.load('L2.png')]
        self.char = pygame.image.load('standing.png')
        self.dead_image = pygame.image.load('dead.png')
        self.isAlive = True
        self.health = 3  # Add a health attribute and set it to 3
        self.game_over = False
        self.game_over_message = None

        self.isJump = False
        self.jumpCount = 10
        self.left = False
        self.right = False
        self.walkCount = 0
        self.score = 0
         
    def increment_score(self):
        self.score += 1

    def move(self, keys):
        if keys[pygame.K_a] and self.x > self.speed:
            self.x -= self.speed
            self.left = True
            self.right = False
        elif keys[pygame.K_d] and self.x < 500 - self.speed - self.width:
            self.x += self.speed
            self.left = False
            self.right = True
        else:
            self.left = False
            self.right = False
            self.walkCount = 0

        if not self.isJump:
            if keys[pygame.K_w]:
                self.isJump = True
                self.left = False
                self.right = False
                self.walkCount = 0
        else:
            if self.jumpCount >= -10:
                self.y -= (self.jumpCount * abs(self.jumpCount) * 0.5)
                self.jumpCount -= 1
            else:
                self.jumpCount = 10
                self.isJump = False

    def draw(self, win):
        if self.walkCount + 1 >= 27:
            self.walkCount = 0

        if self.isAlive:
            if self.left:
                win.blit(self.walkLeft[self.walkCount % len(self.walkLeft)], (self.x, self.y))
                self.walkCount += 1
            elif self.right:
                win.blit(self.walkRight[self.walkCount % len(self.walkRight)], (self.x, self.y))
                self.walkCount += 1
            else:
                win.blit(self.char, (self.x, self.y))
                self.walkCount = 0
        else:
            # Player is dead, display the dead_image
            win.blit(self.dead_image, (self.x, self.y))

class Game:
    def __init__(self):
        pygame.init()

        self.win = pygame.display.set_mode((500, 480))
        pygame.display.set_caption("Pygame Animation")

        self.clock = pygame.time.Clock()

        self.projectiles = []
        self.enemies = []

        self.fire_delay = 0.5
        self.last_fire_time = time.time()

        self.enemy_spawn_delay = 2
        self.last_enemy_spawn_time = time.time()

        self.player = Player()
        self.game_over = False
        self.game_over_message = None
       

    def create_game_over_message(self):
        font = pygame.font.Font(None, 36)
        self.game_over_message = font.render("Game Over", True, (255, 0, 0))

    def redrawGameWindow(self):
        bg = pygame.image.load('bg.png')
        self.win.blit(bg, (0, 0))

    # Display player's health in the top left corner
        font = pygame.font.Font(None, 36)
        health_text = font.render(f"Health: {self.player.health}", True, (255, 255, 255))
        self.win.blit(health_text, (10, 10))

    # Display player's score in the top right corner
        score_text = font.render(f"Score: {self.player.score}", True, (255, 255, 255))
        self.win.blit(score_text, (400, 10))  # Adjust the position as needed
    
        for projectile in self.projectiles:
            projectile.draw(self.win)

        for enemy in self.enemies:
            enemy.draw(self.win)
    
        self.player.draw(self.win)
    
        if self.player.isAlive:
            pygame.display.update()
        elif not self.game_over:
            self.create_game_over_message()
            self.game_over = True
        elif self.game_over_message is not None:
            self.win.blit(self.game_over_message, (200, 200))
            pygame.display.update()
        if not self.player.isAlive:
            pygame.display.update()
            
    def run(self):
        running = True
        while running:
            self.clock.tick(27)
            current_time = time.time()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

            keys = pygame.key.get_pressed()

            self.player.move(keys)

            if self.player.isAlive:
                if keys[pygame.K_SPACE]:
                    if current_time - self.last_fire_time > self.fire_delay:
                        facing = "left" if self.player.left else "right"
                        projectile = Projectile(round(self.player.x + self.player.width // 2), round(self.player.y + self.player.height // 2), facing)
                        self.projectiles.append(projectile)
                        self.last_fire_time = current_time

                for projectile in self.projectiles:
                    if 0 < projectile.x < 500:
                        projectile.move()
                    else:
                        self.projectiles.remove(projectile)

                if current_time - self.last_enemy_spawn_time > self.enemy_spawn_delay:
                    enemy = Enemy(self.player.x, self.player.y)
                    self.enemies.append(enemy)
                    self.last_enemy_spawn_time = current_time

                for enemy in self.enemies:
                    enemy.move()

                    # Collision detection between player and enemy
                    if (self.player.x + self.player.width) > enemy.x and self.player.x < (enemy.x + enemy.width):
                        if (self.player.y < (enemy.y + enemy.height)) and (self.player.y + self.player.height > enemy.y):
                            self.player.health -= 1
                            enemy.killed = True  # Mark the enemy as killed
                            enemy.kill_time = time.time()  # Record the time the enemy was killed

                            if self.player.health <= 0:
                                self.player.isAlive = False

                for enemy in self.enemies:
                    if enemy.killed and time.time() - enemy.kill_time >= 2:
                        self.enemies.remove(enemy)  # Remove the dead enemy after 2 seconds

                for projectile in self.projectiles:
                    for enemy in self.enemies:
                        if (projectile.x + projectile.speed) > enemy.x and (projectile.x - projectile.speed) < (enemy.x + enemy.width):
                            if (projectile.y - projectile.speed) < (enemy.y + enemy.height) and (projectile.y + projectile.speed) > enemy.y:
                                self.projectiles.remove(projectile)
                                enemy.killed = True
                                enemy.kill_time = time.time()
                                self.player.increment_score()

            self.redrawGameWindow()

        pygame.quit()

if __name__ == "__main__":
    game = Game()
    game.run()
